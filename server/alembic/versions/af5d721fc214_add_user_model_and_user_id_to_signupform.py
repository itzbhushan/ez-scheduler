"""Add User model and user_id to SignupForm

Revision ID: af5d721fc214
Revises: 041ca3de6870
Create Date: 2025-07-17 18:26:01.319650

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "af5d721fc214"
down_revision: Union[str, Sequence[str], None] = "041ca3de6870"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )

    # Drop dependent tables first (messages and form_fields reference other tables)
    op.drop_table("messages")
    op.drop_table("form_fields")
    op.drop_table("registrations")

    # Drop foreign key constraint before dropping conversation table
    op.drop_constraint(
        "signup_forms_conversation_id_fkey", "signup_forms", type_="foreignkey"
    )
    op.drop_column("signup_forms", "conversation_id")
    op.drop_table("conversations")

    # Add new columns and constraints
    op.add_column("signup_forms", sa.Column("user_id", sa.Uuid(), nullable=False))
    op.add_column("signup_forms", sa.Column("start_time", sa.Time(), nullable=True))
    op.add_column("signup_forms", sa.Column("end_time", sa.Time(), nullable=True))
    op.alter_column(
        "signup_forms",
        "event_date",
        existing_type=sa.VARCHAR(),
        type_=sa.Date(),
        existing_nullable=False,
        postgresql_using="event_date::date",
    )
    op.alter_column(
        "signup_forms",
        "description",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        nullable=False,
    )
    op.alter_column(
        "signup_forms", "is_active", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.create_foreign_key(None, "signup_forms", "users", ["user_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "signup_forms",
        sa.Column("conversation_id", sa.UUID(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "signup_forms", type_="foreignkey")
    op.create_foreign_key(
        op.f("signup_forms_conversation_id_fkey"),
        "signup_forms",
        "conversations",
        ["conversation_id"],
        ["id"],
    )
    op.alter_column(
        "signup_forms", "is_active", existing_type=sa.BOOLEAN(), nullable=True
    )
    op.alter_column(
        "signup_forms",
        "description",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        nullable=True,
    )
    op.alter_column(
        "signup_forms",
        "event_date",
        existing_type=sa.Date(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.drop_column("signup_forms", "end_time")
    op.drop_column("signup_forms", "start_time")
    op.drop_column("signup_forms", "user_id")
    op.create_table(
        "messages",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("conversation_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("content", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "message_metadata",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name=op.f("messages_conversation_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("messages_pkey")),
    )
    op.create_table(
        "registrations",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("form_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("phone", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "additional_data",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "registered_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["form_id"], ["signup_forms.id"], name=op.f("registrations_form_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("registrations_pkey")),
    )
    op.create_table(
        "form_fields",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("form_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("field_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("field_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("label", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("required", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "options",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("order", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["form_id"], ["signup_forms.id"], name=op.f("form_fields_form_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("form_fields_pkey")),
    )
    op.create_table(
        "conversations",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("conversations_pkey")),
    )
    op.drop_table("users")
    # ### end Alembic commands ###
